En PHP, las estructuras de datos son formas de organizar y almacenar datos para su posterior manipulación. Estas estructuras permiten manejar conjuntos de información de manera eficiente y ofrecen métodos para acceder, insertar, eliminar y modificar datos según sea necesario. Algunas de las estructuras de datos comunes en PHP son:

### 1. Arrays (Matrices):

Los arrays (o matrices) son estructuras de datos que pueden contener múltiples elementos de diferentes tipos, indexados por números enteros (índices numéricos) o cadenas (índices asociativos).

#### Arrays indexados numéricamente:
```php
$arrayNumerico = array("Manzana", "Banana", "Naranja");
echo $arrayNumerico[0]; // Muestra: Manzana
```

#### Arrays indexados asociativamente:
```php
$arrayAsociativo = array("nombre" => "Juan", "edad" => 30, "ciudad" => "Madrid");
echo $arrayAsociativo["nombre"]; // Muestra: Juan
```

### 2. Listas (List):

Las listas en PHP son estructuras de datos similares a los arrays, pero están indexadas numéricamente y permiten trabajar con colecciones de datos de manera más dinámica.

```php
$lista = [10, 20, 30, 40];
echo $lista[1]; // Muestra: 20
```

### 3. Pilas (Stacks) y Colas (Queues):

Las pilas y colas son estructuras de datos que siguen el principio de "último en entrar, primero en salir" (LIFO) y "primero en entrar, primero en salir" (FIFO), respectivamente.

#### Ejemplo de una pila (Stack):
```php
$pila = new SplStack();
$pila->push('Elemento 1');
$pila->push('Elemento 2');
echo $pila->pop(); // Muestra: Elemento 2
```

#### Ejemplo de una cola (Queue):
```php
$cola = new SplQueue();
$cola->enqueue('Elemento 1');
$cola->enqueue('Elemento 2');
echo $cola->dequeue(); // Muestra: Elemento 1
```

### 4. Conjuntos (Sets):

Los conjuntos son estructuras que almacenan elementos únicos, sin duplicados.

```php
$set = new SplObjectStorage();
$object1 = new stdClass();
$object2 = new stdClass();

$set->attach($object1);
$set->attach($object2);
echo $set->count(); // Muestra: 2
```

### 5. Diccionarios (Dictionaries):

Los diccionarios almacenan pares clave-valor y permiten acceder a los valores a través de sus claves.

```php
$diccionario = array("clave1" => "valor1", "clave2" => "valor2");
echo $diccionario["clave1"]; // Muestra: valor1
```

Estas son solo algunas de las estructuras de datos comunes en PHP. Cada una tiene su propósito y ventajas específicas, y se utilizan en diferentes situaciones según las necesidades de almacenamiento, acceso y manipulación de datos en una aplicación.